// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Studomat.DAL;

namespace Studomat.DAL.Migrations
{
    [DbContext(typeof(StudentManagerDbContext))]
    [Migration("20201016141950_PromjenaNaAppuseru")]
    partial class PromjenaNaAppuseru
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Studomat.MODEL.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DatumRodjenja");

                    b.Property<DateTime>("DatumUpisa");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Ime");

                    b.Property<string>("JMBAG");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("MjestoId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OIB");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Prezime");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("MjestoId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Studomat.MODEL.Fakultet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa");

                    b.Property<DateTime>("DatumOsnutka");

                    b.Property<int?>("MjestoId");

                    b.Property<string>("Naziv");

                    b.HasKey("ID");

                    b.HasIndex("MjestoId");

                    b.ToTable("Fakulteti");
                });

            modelBuilder.Entity("Studomat.MODEL.Kolegij", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NastavnikId");

                    b.Property<string>("Naziv");

                    b.Property<string>("Opis");

                    b.HasKey("ID");

                    b.HasIndex("NastavnikId");

                    b.ToTable("Kolegiji");
                });

            modelBuilder.Entity("Studomat.MODEL.Mjesto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivMjesta");

                    b.Property<int?>("ZupanijaId");

                    b.HasKey("ID");

                    b.HasIndex("ZupanijaId");

                    b.ToTable("Mjesta");
                });

            modelBuilder.Entity("Studomat.MODEL.Nastavnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adresa");

                    b.Property<string>("Ime");

                    b.Property<string>("Lozinka");

                    b.Property<int?>("MjestoId");

                    b.Property<string>("Prezime");

                    b.Property<string>("TitulaIspred");

                    b.Property<string>("TitulaIza");

                    b.HasKey("ID");

                    b.HasIndex("MjestoId");

                    b.ToTable("Nastavnici");
                });

            modelBuilder.Entity("Studomat.MODEL.Ocjene", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<DateTime>("DatumPolaganja");

                    b.Property<int?>("KolegijId");

                    b.Property<int>("Ocjena");

                    b.HasKey("AppUserId");

                    b.HasIndex("KolegijId");

                    b.ToTable("Ocjene");
                });

            modelBuilder.Entity("Studomat.MODEL.Zupanija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivZupanija");

                    b.HasKey("ID");

                    b.ToTable("Zupanije");

                    b.HasData(
                        new { ID = 1, NazivZupanija = "Zagrebačka" },
                        new { ID = 2, NazivZupanija = "Krapinsko-zagorska" },
                        new { ID = 3, NazivZupanija = "Sisačko-moslavačka" },
                        new { ID = 4, NazivZupanija = "Karlovačka" },
                        new { ID = 5, NazivZupanija = "Varaždinska" },
                        new { ID = 6, NazivZupanija = "Koprivničko-križevačka" },
                        new { ID = 7, NazivZupanija = "Bjelovarsko-bilogorska" },
                        new { ID = 8, NazivZupanija = "Primorsko-goranska" },
                        new { ID = 9, NazivZupanija = "Ličko-senjska" },
                        new { ID = 10, NazivZupanija = "Virovitičko-podravska" },
                        new { ID = 11, NazivZupanija = "Požeško-slavonska" },
                        new { ID = 12, NazivZupanija = "Brodsko-posavska" },
                        new { ID = 13, NazivZupanija = "Zadarska" },
                        new { ID = 14, NazivZupanija = "Osječko-baranjska" },
                        new { ID = 15, NazivZupanija = "Šibensko-kninska" },
                        new { ID = 16, NazivZupanija = "Vukovarsko-srijemska" },
                        new { ID = 17, NazivZupanija = "Splitsko-dalmatinska" },
                        new { ID = 18, NazivZupanija = "Istarska" },
                        new { ID = 19, NazivZupanija = "Dubrovačko-neretvanska" },
                        new { ID = 20, NazivZupanija = "Međimurska" },
                        new { ID = 21, NazivZupanija = "Grad Zagreb" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Studomat.MODEL.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Studomat.MODEL.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Studomat.MODEL.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Studomat.MODEL.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Studomat.MODEL.AppUser", b =>
                {
                    b.HasOne("Studomat.MODEL.Mjesto", "Mjesto")
                        .WithMany("AppUsers")
                        .HasForeignKey("MjestoId");
                });

            modelBuilder.Entity("Studomat.MODEL.Fakultet", b =>
                {
                    b.HasOne("Studomat.MODEL.Mjesto", "Mjesto")
                        .WithMany("Fakulteti")
                        .HasForeignKey("MjestoId");
                });

            modelBuilder.Entity("Studomat.MODEL.Kolegij", b =>
                {
                    b.HasOne("Studomat.MODEL.Nastavnik", "Nastavnik")
                        .WithMany("Kolegiji")
                        .HasForeignKey("NastavnikId");
                });

            modelBuilder.Entity("Studomat.MODEL.Mjesto", b =>
                {
                    b.HasOne("Studomat.MODEL.Zupanija", "Zupanija")
                        .WithMany("Mjesta")
                        .HasForeignKey("ZupanijaId");
                });

            modelBuilder.Entity("Studomat.MODEL.Nastavnik", b =>
                {
                    b.HasOne("Studomat.MODEL.Mjesto", "Mjesto")
                        .WithMany("Nastavnici")
                        .HasForeignKey("MjestoId");
                });

            modelBuilder.Entity("Studomat.MODEL.Ocjene", b =>
                {
                    b.HasOne("Studomat.MODEL.AppUser", "AppUser")
                        .WithMany("Ocjene")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Studomat.MODEL.Kolegij", "Kolegij")
                        .WithMany()
                        .HasForeignKey("KolegijId");
                });
#pragma warning restore 612, 618
        }
    }
}
